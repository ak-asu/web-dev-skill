name: Step 11, Animations and Transitions

on:
  push:
    branches: [ main ]
    paths:
      - '.github/steps/-step.txt'
      - 'resources/Quiz11.md'
      - 'package.json'
      - 'src/components/**'
  workflow_dispatch:
  repository_dispatch:
    types: [check-chapter11]

permissions:
  contents: write

jobs:
  get_current_step:
    name: Check current step number
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: get_step
        run: |
          current_step=$(cat ./.github/steps/-step.txt)
          echo "current_step=$current_step" >> $GITHUB_OUTPUT
          if [ "$current_step" -eq "11" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      current_step: ${{ steps.get_step.outputs.current_step }}
      should_run: ${{ steps.get_step.outputs.should_run }}

  validate_and_progress:
    name: Validate Quiz Answers and Progress
    needs: get_current_step
    if: >
      ${{ !github.event.repository.is_template
          && needs.get_current_step.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Validate quiz answers
        id: quiz_validation
        run: |
          QUIZ="resources/Quiz11.md"
          if [ ! -f "$QUIZ" ]; then
            echo "::error::$QUIZ is missing"
            exit 1
          fi
          # Check for correct answers
          INCORRECT=0
          if ! grep -A5 "1. \*\*Which script builds a production" "$QUIZ" | grep -q "\[X\] B. \`npm run build\`"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "2. \*\*Which file is used to define" "$QUIZ" | grep -q "\[X\] A. \`.env\`"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "3. \*\*Which free service" "$QUIZ" | grep -q "\[X\] B. GitHub Pages"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if [ "$INCORRECT" -gt 0 ]; then
            echo "::error::Found $INCORRECT incorrect answers."
            exit 1
          fi
          echo "quiz_ok=true" >> $GITHUB_OUTPUT

      - name: Check Animation Dependencies
        id: animation_deps
        if: steps.quiz_validation.outputs.quiz_ok == 'true'
        run: |
          if [ ! -f "package.json" ]; then
            echo "::error::package.json file is missing."
            exit 1
          fi          
          # Check for motion/framer-motion dependency
          if ! grep -q -E "motion\":|framer-motion\":" "package.json"; then
            echo "::error::Missing motion or framer-motion dependency in package.json."
            exit 1
          fi
          echo "animation_deps_ok=true" >> $GITHUB_OUTPUT

      - name: Check Animated Components
        id: animated_components
        if: steps.quiz_validation.outputs.quiz_ok == 'true' && steps.animation_deps.outputs.animation_deps_ok == 'true'
        run: |
          # Check for required animated components
          REQUIRED_COMPONENTS=(
            "Achievements"
            "Education"
            "Experience"
          )          
          MISSING_COMPONENTS=""
          for component in "${REQUIRED_COMPONENTS[@]}"; do
            if [ ! -f "src/components/${component}.tsx" ]; then
              MISSING_COMPONENTS="$MISSING_COMPONENTS $component"
            fi
          done          
          if [ ! -z "$MISSING_COMPONENTS" ]; then
            echo "::error::Missing required animated components:$MISSING_COMPONENTS"
            exit 1
          fi          
          # Check for motion import and usage in each component
          for component in "${REQUIRED_COMPONENTS[@]}"; do
            if ! grep -q -E "import.*motion|from .*motion" "src/components/${component}.tsx"; then
              echo "::error::${component}.tsx does not import motion"
              exit 1
            fi            
            if ! grep -q -E "motion\.|<motion" "src/components/${component}.tsx"; then
              echo "::error::${component}.tsx does not use motion components"
              exit 1
            fi
          done          
          # Check for variants in Education component
          if ! grep -q "variants" "src/components/Education.tsx"; then
            echo "::error::Education.tsx does not use variants for animations"
            exit 1
          fi          
          # Check for timeline in Experience component
          if ! grep -q -E "timeline|stagger" "src/components/Experience.tsx"; then
            echo "::error::Experience.tsx does not implement timeline or staggered animations"
            exit 1
          fi          
          echo "animated_components_ok=true" >> $GITHUB_OUTPUT

      - name: Check Advanced Animation Features
        id: advanced_check
        if: steps.quiz_validation.outputs.quiz_ok == 'true' && steps.animated_components.outputs.animated_components_ok == 'true'
        run: |
          # Check for advanced features like AnimatePresence, staggerChildren, or whileHover
          ADVANCED_FEATURES=(
            "AnimatePresence"
            "staggerChildren"
            "whileHover"
            "whileTap"
            "exit="
          )          
          FOUND=false
          for feature in "${ADVANCED_FEATURES[@]}"; do
            if grep -r "$feature" --include="*.tsx" --include="*.ts" src > /dev/null; then
              FOUND=true
              break
            fi
          done          
          if [ "$FOUND" = false ]; then
            echo "::error::No advanced animation features found. Include AnimatePresence, staggerChildren, whileHover, whileTap, or exit animations."
            exit 1
          fi          
          echo "advanced_ok=true" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        if: steps.quiz_validation.outputs.quiz_ok == 'true'
        run: npm install

      - name: Build Project
        id: build_check
        if: steps.quiz_validation.outputs.quiz_ok == 'true' && steps.advanced_check.outputs.advanced_ok == 'true'
        run: |
          if npm run build; then
            echo "build_ok=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Build failed. Please fix the issues."
            exit 1
          fi

      - name: Update to Step 12
        if: >
          steps.quiz_validation.outputs.quiz_ok == 'true' &&
          steps.animation_deps.outputs.animation_deps_ok == 'true' &&
          steps.animated_components.outputs.animated_components_ok == 'true' &&
          steps.advanced_check.outputs.advanced_ok == 'true' &&
          steps.build_check.outputs.build_ok == 'true' &&
          success()
        uses: skills/action-update-step@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          from_step: 11
          to_step: 12
          branch_name: ${{ github.ref_name }}
