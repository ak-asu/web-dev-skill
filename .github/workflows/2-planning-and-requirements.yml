name: Chapter 2 - Planning & Requirements

on:
  push:
    branches: [ main ]
    paths:
      - '.github/steps/-step.txt'
      - 'resources/Quiz2.md'
      - 'resources/SRS.md'
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  get_current_step:
    runs-on: ubuntu-latest
    outputs:
      current_step: ${{ steps.read_step.outputs.current_step }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: read_step
        run: echo "current_step=$(cat ./.github/steps/-step.txt)" >> $GITHUB_OUTPUT
      - name: Early terminate if not on step 2
        if: steps.read_step.outputs.current_step != '2'
        run: exit 78

  create_issues:
    needs: get_current_step
    if: >
      !github.event.repository.is_template &&
      needs.get_current_step.outputs.current_step == '2' &&
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create Quiz Task Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter2-task,quiz',
              state: 'open'
            });
            
            if (existingIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Chapter 2: Complete the Planning & Requirements Quiz',
                body: `
                # Complete the Planning & Requirements Quiz
                
                1. Navigate to the \`resources/Quiz2.md\` file
                2. Answer all questions by marking the correct answers with [X]
                3. Select exactly 3 answers total (one for each question)
                4. Commit your changes to complete this task
                
                This issue will automatically close when you successfully complete the quiz.
                `,
                labels: ['chapter2-task', 'quiz']
              });
            }
            
      - name: Create SRS Document Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter2-task,srs',
              state: 'open'
            });
            
            if (existingIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Chapter 2: Create an SRS Document',
                body: `
                # Create a Software Requirements Specification
                
                1. Create a \`resources/SRS.md\` file for your portfolio project
                2. Include the following sections:
                   - Introduction
                   - Overall Description
                   - Specific Requirements
                   - Target audience/users
                   - Features and functionality
                
                The document should be comprehensive (at least 500 characters).
                
                This issue will automatically close when you successfully complete the SRS document.
                `,
                labels: ['chapter2-task', 'srs']
              });
            }

  validate_and_progress:
    needs: get_current_step
    if: >
      !github.event.repository.is_template &&
      needs.get_current_step.outputs.current_step == '2'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Quiz Answers
        id: quiz
        run: |
          QUIZ=resources/Quiz2.md
          COUNT=$(grep -c "\[X\]" "$QUIZ" || echo 0)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No answers selected. Mark answers with [X]."
            exit 1
          fi
          if [ "$COUNT" -ne 3 ]; then
            echo "::error::Found $COUNT selections; select exactly 3 answers (one for each question)."
            exit 1
          fi
          
          # Check if each question has exactly one answer
          Q1_COUNT=$(grep -A5 "1. \*\*Which SDLC model" "$QUIZ" | grep -c "\[X\]" || true)
          Q2_COUNT=$(grep -A5 "2. \*\*What is a user persona" "$QUIZ" | grep -c "\[X\]" || true)
          Q3_COUNT=$(grep -A5 "3. \*\*Which section of the Software" "$QUIZ" | grep -c "\[X\]" || true)
          
          if [ "$Q1_COUNT" -ne 1 ] || [ "$Q2_COUNT" -ne 1 ] || [ "$Q3_COUNT" -ne 1 ]; then
            echo "::error::Each question must have exactly one answer selected."
            exit 1
          fi
          
          # Check for correct answers
          INCORRECT=0
          if ! grep -A5 "1. \*\*Which SDLC model" "$QUIZ" | grep -q "\[X\] B. Waterfall"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "2. \*\*What is a user persona" "$QUIZ" | grep -q "\[X\] B. A fictional representation of a target user to guide design decisions"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "3. \*\*Which section of the Software" "$QUIZ" | grep -q "\[X\] B. Overall Description"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          
          if [ "$INCORRECT" -gt 0 ]; then
            echo "::error::Found $INCORRECT incorrect answers."
            exit 1
          fi
          echo "quiz_ok=true" >> $GITHUB_OUTPUT

      - name: Check SRS Document
        id: srs
        if: steps.quiz.outputs.quiz_ok == 'true'
        run: |
          if [ ! -f "resources/SRS.md" ]; then
            echo "::error::SRS document is missing. Please create resources/SRS.md"
            exit 1
          fi
          
          # Check if SRS document has minimum content
          SRS_SIZE=$(wc -c < "resources/SRS.md" || echo 0)
          if [ "$SRS_SIZE" -lt 500 ]; then
            echo "::error::SRS document is too short. Please complete the document."
            exit 1
          fi
          
          echo "srs_ok=true" >> $GITHUB_OUTPUT

      - name: Close Completed Quiz Issue
        if: steps.quiz.outputs.quiz_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter2-task,quiz',
              state: 'open'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

      - name: Close Completed SRS Issue
        if: steps.srs.outputs.srs_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter2-task,srs',
              state: 'open'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

      - name: Ensure All Chapter-2 Tasks Are Closed
        if: steps.quiz.outputs.quiz_ok == 'true' && steps.srs.outputs.srs_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add a delay function to wait between retries
            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
            
            // Maximum number of retries and retry delay in ms
            const MAX_RETRIES = 3;
            const RETRY_DELAY = 3000; // 3 seconds
            
            let retries = 0;
            let openIssues = [];
            
            while (retries < MAX_RETRIES) {
              try {
                const { data: issues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: 'chapter2-task',
                  state: 'open'
                });
                
                if (issues.length === 0) {
                  console.log('All chapter2-task issues are closed!');
                  return; // Success, exit the script
                }
                
                openIssues = issues;
                console.log(`Found ${issues.length} open issues. Retrying in ${RETRY_DELAY/1000} seconds... (Attempt ${retries + 1}/${MAX_RETRIES})`);
                
                // Wait before next retry
                await delay(RETRY_DELAY);
                retries++;
              } catch (error) {
                console.error(`Error checking issues: ${error.message}`);
                core.warning(`Error checking issues: ${error.message}`);
                break;
              }
            }
            
            if (openIssues.length > 0) {
              core.warning(`There are still ${openIssues.length} open chapter2-task issues. This may be due to API delay.`);
              // Log issue numbers for debugging
              openIssues.forEach(issue => console.log(`Issue #${issue.number}: ${issue.title}`));
            }

      - name: Advance to Step 3
        if: success()
        uses: skills/action-update-step@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          from_step: 2
          to_step: 3
          branch_name: ${{ github.ref_name }}