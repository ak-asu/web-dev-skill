name: Step 7, React Fundamentals

on:
  push:
    branches: [ main ]
    paths:
      - '.github/steps/-step.txt'
      - 'resources/Quiz7.md'
      - 'src/components/**'
      - 'src/App.tsx'
  workflow_dispatch:
  repository_dispatch:
    types: [check-chapter7]

permissions:
  contents: write

jobs:
  get_current_step:
    name: Check current step number
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: get_step
        run: |
          current_step=$(cat ./.github/steps/-step.txt)
          echo "current_step=$current_step" >> $GITHUB_OUTPUT
          if [ "$current_step" -eq "7" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      current_step: ${{ steps.get_step.outputs.current_step }}
      should_run: ${{ steps.get_step.outputs.should_run }}

  validate_and_progress:
    name: Validate Quiz Answers and Progress
    needs: get_current_step
    if: >
      ${{ !github.event.repository.is_template
          && needs.get_current_step.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Validate quiz answers
        id: quiz_validation
        run: |
          QUIZ="resources/Quiz7.md"
          if [ ! -f "$QUIZ" ]; then
            echo "::error::$QUIZ is missing"
            exit 1
          fi
          # Check for correct answers
          INCORRECT=0
          if ! grep -A5 "1. \*\*Which Hook lets you add state" "$QUIZ" | grep -q "\[X\] C. useState"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "2. \*\*Which Hook runs side effects" "$QUIZ" | grep -q "\[X\] C. useEffect"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if ! grep -A5 "3. \*\*How can you lazy-initialize state" "$QUIZ" | grep -q "\[X\] A. \`useState(() => expensiveInit())\`"; then 
            INCORRECT=$((INCORRECT+1))
          fi
          if [ "$INCORRECT" -gt 0 ]; then
            echo "::error::Found $INCORRECT incorrect answers."
            exit 1
          fi
          echo "quiz_ok=true" >> $GITHUB_OUTPUT

      - name: Check React Components
        id: components_check
        if: steps.quiz_validation.outputs.quiz_ok == 'true'
        run: |
          if [ ! -d "src/components" ]; then
            mkdir -p src/components
            echo "::warning::Created missing components directory."
          fi
          # Check for required React components
          REQUIRED_COMPONENTS=(
            "About"
            "Hero"
            "Footer"
          )
          MISSING_COMPONENTS=""
          for component in "${REQUIRED_COMPONENTS[@]}"; do
            if [ ! -f "src/components/${component}.tsx" ]; then
              MISSING_COMPONENTS="$MISSING_COMPONENTS $component"
            fi
          done
          if [ ! -z "$MISSING_COMPONENTS" ]; then
            echo "::error::Missing required components:$MISSING_COMPONENTS"
            exit 1
          fi          
          # Check App.tsx for component imports
          for component in "${REQUIRED_COMPONENTS[@]}"; do
            if ! grep -q "import.*$component" "src/App.tsx"; then
              echo "::error::Component $component is not imported in App.tsx"
              exit 1
            fi
          done
          # Check if App.tsx renders the required components
          REQUIRED_RENDERS=(
            "<About"
            "<Hero"
            "<Footer"
          )
          MISSING_RENDERS=""
          for render in "${REQUIRED_RENDERS[@]}"; do
            if ! grep -q "$render" "src/App.tsx"; then
              MISSING_RENDERS="$MISSING_RENDERS\n- $render"
            fi
          done
          if [ ! -z "$MISSING_RENDERS" ]; then
            echo "::error::App.tsx is not rendering all required components:$MISSING_RENDERS"
            exit 1
          fi
          echo "components_ok=true" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        if: steps.quiz_validation.outputs.quiz_ok == 'true'
        run: npm install
      
      - name: Build Project
        id: build_check
        if: steps.quiz_validation.outputs.quiz_ok == 'true'
        run: |
          if npm run build; then
            echo "build_ok=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Build failed. Please fix the issues."
            exit 1
          fi

      - name: Update to Step 8
        if: >
          steps.quiz_validation.outputs.quiz_ok == 'true' &&
          steps.components_check.outputs.components_ok == 'true' &&
          steps.build_check.outputs.build_ok == 'true' &&
          success()
        uses: skills/action-update-step@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          from_step: 7
          to_step: 8
          branch_name: ${{ github.ref_name }}
