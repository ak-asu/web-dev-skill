name: Chapter 7 - React Fundamentals

on:
  push:
    branches: [ main ]
    paths:
      - 'resources/Quiz7.md'
      - 'src/components/**'
      - 'src/App.tsx'
  workflow_dispatch:

permissions:
  contents: write
  issues: read
  issues: write

jobs:
  get_current_step:
    runs-on: ubuntu-latest
    outputs:
      current_step: ${{ steps.read_step.outputs.current_step }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: read_step
        run: echo "current_step=$(cat ./.github/steps/-step.txt)" >> $GITHUB_OUTPUT

  create_issues:
    needs: get_current_step
    if: >
      !github.event.repository.is_template &&
      needs.get_current_step.outputs.current_step == '7' &&
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create Quiz Task Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter7-task,quiz',
              state: 'open'
            });
            
            if (existingIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Chapter 7: Complete the React Quiz',
                body: `
                # Complete the React Fundamentals Quiz
                
                1. Navigate to the \`resources/Quiz7.md\` file
                2. Answer all questions by marking the correct answers with [X]
                3. Select exactly 5 answers total
                4. Commit your changes to complete this task
                
                This issue will automatically close when you successfully complete the quiz.
                `,
                labels: ['chapter7-task', 'quiz']
              });
            }
            
      - name: Create React Components Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter7-task,components',
              state: 'open'
            });
            
            if (existingIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Chapter 7: Create React Components',
                body: `
                # Create React Components
                
                Create or update the following React components in the \`src/components\` folder:
                
                1. \`About.tsx\`: A component to display information about yourself
                2. \`Hero.tsx\`: A hero section component for the landing page
                3. \`Footer.tsx\`: A footer component for your portfolio
                4. \`NotFound.tsx\`: A 404 page component for handling missing routes
                
                Each component should:
                - Be properly typed with TypeScript
                - Use data from your portfolio data files
                - Include appropriate styling with Tailwind CSS
                - Implement at least one React hook (like useState)
                
                After creating these components, update your \`App.tsx\` to include them.
                
                This issue will automatically close when you successfully complete all component tasks.
                `,
                labels: ['chapter7-task', 'components']
              });
            }

  validate_and_progress:
    needs: get_current_step
    if: >
      !github.event.repository.is_template &&
      needs.get_current_step.outputs.current_step == '7'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Validate Quiz Answers
        id: quiz
        run: |
          QUIZ=resources/Quiz7.md
          COUNT=$(grep -c "\[X\]" "$QUIZ" || echo 0)
          if [ "$COUNT" -ne 5 ]; then
            echo "::error::You must select exactly 5 answers (found $COUNT)."
            exit 1
          fi
          echo "quiz_ok=true" >> $GITHUB_OUTPUT

      - name: Check React Components
        id: components_check
        if: steps.quiz.outputs.quiz_ok == 'true'
        run: |
          if [ ! -d "src/components" ]; then
            mkdir -p src/components
            echo "::warning::Created missing components directory."
          fi
          
          # Check for required React components
          REQUIRED_COMPONENTS=(
            "About"
            "Hero"
            "Footer"
            "NotFound"
          )
          
          MISSING_COMPONENTS=""
          for comp in "${REQUIRED_COMPONENTS[@]}"; do
            if ! find src/components -name "${comp}.tsx" > /dev/null; then
              MISSING_COMPONENTS="$MISSING_COMPONENTS\n- $comp"
            fi
          done
          
          if [ ! -z "$MISSING_COMPONENTS" ]; then
            echo "::error::Missing required React components:$MISSING_COMPONENTS"
            exit 1
          fi
          
          echo "components_ok=true" >> $GITHUB_OUTPUT

      - name: Check App.tsx Usage
        id: app_check
        if: steps.components_check.outputs.components_ok == 'true'
        run: |
          if [ ! -f "src/App.tsx" ]; then
            echo "::error::src/App.tsx file is missing."
            exit 1
          fi
          
          # Check if App.tsx imports the required components
          REQUIRED_IMPORTS=(
            "import.*About.*from"
            "import.*Hero.*from"
            "import.*Footer.*from"
            "import.*NotFound.*from"
          )
          
          MISSING_IMPORTS=""
          for import in "${REQUIRED_IMPORTS[@]}"; do
            if ! grep -q "$import" "src/App.tsx"; then
              MISSING_IMPORTS="$MISSING_IMPORTS\n- $import"
            fi
          done
          
          if [ ! -z "$MISSING_IMPORTS" ]; then
            echo "::error::App.tsx is missing required component imports:$MISSING_IMPORTS"
            exit 1
          fi
          
          # Check if App.tsx renders the required components
          REQUIRED_RENDERS=(
            "<About"
            "<Hero"
            "<Footer"
          )
          
          MISSING_RENDERS=""
          for render in "${REQUIRED_RENDERS[@]}"; do
            if ! grep -q "$render" "src/App.tsx"; then
              MISSING_RENDERS="$MISSING_RENDERS\n- $render"
            fi
          done
          
          if [ ! -z "$MISSING_RENDERS" ]; then
            echo "::error::App.tsx is not rendering all required components:$MISSING_RENDERS"
            exit 1
          fi
          
          echo "app_ok=true" >> $GITHUB_OUTPUT

      - name: Check React Hooks Usage
        id: hooks_check
        if: steps.components_check.outputs.components_ok == 'true'
        run: |
          # Check for React hooks in components
          HOOKS_USAGE=""
          if ! grep -r "useState\|useEffect\|useContext\|useReducer" --include="*.tsx" src/components > /dev/null; then
            HOOKS_USAGE="No React hooks (useState, useEffect, etc.) found in the components."
          fi
          
          if [ ! -z "$HOOKS_USAGE" ]; then
            echo "::error::$HOOKS_USAGE You must use at least one React hook."
            exit 1
          fi
          
          echo "hooks_ok=true" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        if: steps.quiz.outputs.quiz_ok == 'true'
        run: npm install

      - name: Type Check
        id: type_check
        if: steps.quiz.outputs.quiz_ok == 'true'
        run: |
          if npx tsc --noEmit; then
            echo "type_check_ok=true" >> $GITHUB_OUTPUT
          else
            echo "::error::TypeScript type checking failed. Please fix the type errors."
            exit 1
          fi

      - name: Run Lint Check
        id: lint_check
        if: steps.quiz.outputs.quiz_ok == 'true'
        run: |
          if npm run lint; then
            echo "lint_ok=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Linting failed. Please fix the issues."
            exit 1
          fi

      - name: Build Project
        id: build_check
        if: steps.quiz.outputs.quiz_ok == 'true' && steps.lint_check.outputs.lint_ok == 'true'
        run: |
          if npm run build; then
            echo "build_ok=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Build failed. Please fix the issues."
            exit 1
          fi

      - name: Close Completed Quiz Issue
        if: steps.quiz.outputs.quiz_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter7-task,quiz',
              state: 'open'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

      - name: Close Completed Components Issue
        if: >
          steps.components_check.outputs.components_ok == 'true' && 
          steps.app_check.outputs.app_ok == 'true' &&
          steps.hooks_check.outputs.hooks_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter7-task,components',
              state: 'open'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

      - name: Ensure All Chapter-7 Tasks Are Closed
        if: >
          steps.quiz.outputs.quiz_ok == 'true' && 
          steps.components_check.outputs.components_ok == 'true' &&
          steps.app_check.outputs.app_ok == 'true' &&
          steps.hooks_check.outputs.hooks_ok == 'true' &&
          steps.type_check.outputs.type_check_ok == 'true' &&
          steps.lint_check.outputs.lint_ok == 'true' &&
          steps.build_check.outputs.build_ok == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const open = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'chapter7-task',
              state: 'open'
            });
            if (open.data.length > 0) {
              core.setFailed(`There are still ${open.data.length} open chapter7-task issues.`);
            }

      - name: Advance to Step 8
        if: success()
        uses: skills/action-update-step@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          from_step: 7
          to_step: 8
          branch_name: main
