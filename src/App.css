/* Component-specific styles for the portfolio application */

/* Layout styles */
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

/* Component styles - Following Tailwind's component layer approach */
.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* Animation utilities */
@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Media query utilities - Can be replaced with Tailwind responsive classes */
@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

/* 
  Chapter 5 Notes:
  
  This file contains component-specific styles for the App component.
  While Tailwind CSS encourages utility classes in your JSX/TSX files,
  sometimes you'll need custom CSS for:
  
  1. Animations and keyframes
  2. Third-party component styling
  3. Complex selectors and edge cases
  
  In this chapter, you'll learn how to:
  - Migrate traditional CSS to Tailwind utilities
  - Use @apply to extract repetitive utility patterns
  - Balance component CSS files with utility-first approaches
  - Create a consistent design system across your application
*/
