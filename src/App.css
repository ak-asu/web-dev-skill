/* Component-specific styles for the portfolio application */

/* Additional custom styles that complement Tailwind classes */
@layer utilities {
  .text-gradient {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(90deg, #3b82f6, #93c5fd);
  }
  
  .section-padding {
    padding-top: 5rem;
    padding-bottom: 5rem;
  }
}

/* Animation utilities */
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.5s ease-out forwards;
}

/* Animation utilities */
@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Media query utilities - Can be replaced with Tailwind responsive classes */
@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

/* 
  Chapter 5 Notes:
  
  This file contains component-specific styles for the App component.
  While Tailwind CSS encourages utility classes in your JSX/TSX files,
  sometimes you'll need custom CSS for:
  
  1. Animations and keyframes
  2. Third-party component styling
  3. Complex selectors and edge cases
  
  In this chapter, you'll learn how to:
  - Migrate traditional CSS to Tailwind utilities
  - Use @apply to extract repetitive utility patterns
  - Balance component CSS files with utility-first approaches
  - Create a consistent design system across your application
*/
